  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::dubhe_asset_metadata {

  use std::ascii::String;

  use dubhe::dubhe_asset_status::AssetStatus;

  use dubhe::dubhe_asset_type::AssetType;

  public struct AssetMetadata has copy, drop, store {
    name: String,
    symbol: String,
    description: String,
    decimals: u8,
    icon_url: String,
    extra_info: String,
    owner: address,
    supply: u256,
    accounts: u256,
    status: AssetStatus,
    is_mintable: bool,
    is_burnable: bool,
    is_freezable: bool,
    asset_type: AssetType,
  }

  public fun new(
    name: String,
    symbol: String,
    description: String,
    decimals: u8,
    icon_url: String,
    extra_info: String,
    owner: address,
    supply: u256,
    accounts: u256,
    status: AssetStatus,
    is_mintable: bool,
    is_burnable: bool,
    is_freezable: bool,
    asset_type: AssetType,
  ): AssetMetadata {
    AssetMetadata {
                                   name,symbol,description,decimals,icon_url,extra_info,owner,supply,accounts,status,is_mintable,is_burnable,is_freezable,asset_type
                               }
  }

  public fun get(
    self: &AssetMetadata,
  ): (String,String,String,u8,String,String,address,u256,u256,AssetStatus,bool,bool,bool,AssetType) {
    (self.name,self.symbol,self.description,self.decimals,self.icon_url,self.extra_info,self.owner,self.supply,self.accounts,self.status,self.is_mintable,self.is_burnable,self.is_freezable,self.asset_type)
  }

  public fun get_name(self: &AssetMetadata): String {
    self.name
  }

  public fun get_symbol(self: &AssetMetadata): String {
    self.symbol
  }

  public fun get_description(self: &AssetMetadata): String {
    self.description
  }

  public fun get_decimals(self: &AssetMetadata): u8 {
    self.decimals
  }

  public fun get_icon_url(self: &AssetMetadata): String {
    self.icon_url
  }

  public fun get_extra_info(self: &AssetMetadata): String {
    self.extra_info
  }

  public fun get_owner(self: &AssetMetadata): address {
    self.owner
  }

  public fun get_supply(self: &AssetMetadata): u256 {
    self.supply
  }

  public fun get_accounts(self: &AssetMetadata): u256 {
    self.accounts
  }

  public fun get_status(self: &AssetMetadata): AssetStatus {
    self.status
  }

  public fun get_is_mintable(self: &AssetMetadata): bool {
    self.is_mintable
  }

  public fun get_is_burnable(self: &AssetMetadata): bool {
    self.is_burnable
  }

  public fun get_is_freezable(self: &AssetMetadata): bool {
    self.is_freezable
  }

  public fun get_asset_type(self: &AssetMetadata): AssetType {
    self.asset_type
  }

  public(package) fun set_name(self: &mut AssetMetadata, name: String) {
    self.name = name;
  }

  public(package) fun set_symbol(self: &mut AssetMetadata, symbol: String) {
    self.symbol = symbol;
  }

  public(package) fun set_description(self: &mut AssetMetadata, description: String) {
    self.description = description;
  }

  public(package) fun set_decimals(self: &mut AssetMetadata, decimals: u8) {
    self.decimals = decimals;
  }

  public(package) fun set_icon_url(self: &mut AssetMetadata, icon_url: String) {
    self.icon_url = icon_url;
  }

  public(package) fun set_extra_info(self: &mut AssetMetadata, extra_info: String) {
    self.extra_info = extra_info;
  }

  public(package) fun set_owner(self: &mut AssetMetadata, owner: address) {
    self.owner = owner;
  }

  public(package) fun set_supply(self: &mut AssetMetadata, supply: u256) {
    self.supply = supply;
  }

  public(package) fun set_accounts(self: &mut AssetMetadata, accounts: u256) {
    self.accounts = accounts;
  }

  public(package) fun set_status(self: &mut AssetMetadata, status: AssetStatus) {
    self.status = status;
  }

  public(package) fun set_is_mintable(self: &mut AssetMetadata, is_mintable: bool) {
    self.is_mintable = is_mintable;
  }

  public(package) fun set_is_burnable(self: &mut AssetMetadata, is_burnable: bool) {
    self.is_burnable = is_burnable;
  }

  public(package) fun set_is_freezable(self: &mut AssetMetadata, is_freezable: bool) {
    self.is_freezable = is_freezable;
  }

  public(package) fun set_asset_type(self: &mut AssetMetadata, asset_type: AssetType) {
    self.asset_type = asset_type;
  }

  public(package) fun set(
    self: &mut AssetMetadata,
    name: String,
    symbol: String,
    description: String,
    decimals: u8,
    icon_url: String,
    extra_info: String,
    owner: address,
    supply: u256,
    accounts: u256,
    status: AssetStatus,
    is_mintable: bool,
    is_burnable: bool,
    is_freezable: bool,
    asset_type: AssetType,
  ) {
    self.name = name;
    self.symbol = symbol;
    self.description = description;
    self.decimals = decimals;
    self.icon_url = icon_url;
    self.extra_info = extra_info;
    self.owner = owner;
    self.supply = supply;
    self.accounts = accounts;
    self.status = status;
    self.is_mintable = is_mintable;
    self.is_burnable = is_burnable;
    self.is_freezable = is_freezable;
    self.asset_type = asset_type;
  }
}
