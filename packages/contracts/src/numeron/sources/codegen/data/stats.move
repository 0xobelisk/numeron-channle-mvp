  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module numeron::numeron_stats {

  use std::ascii::String;

  public struct Stats has copy, drop, store {
    kill_count: u256,
    battle_count: u256,
    capture_failed_count: u256,
    capture_success_count: u256,
    flee_count: u256,
    release_count: u256,
    move_count: u256,
  }

  public fun new(
    kill_count: u256,
    battle_count: u256,
    capture_failed_count: u256,
    capture_success_count: u256,
    flee_count: u256,
    release_count: u256,
    move_count: u256,
  ): Stats {
    Stats {
                                   kill_count,battle_count,capture_failed_count,capture_success_count,flee_count,release_count,move_count
                               }
  }

  public fun get(self: &Stats): (u256,u256,u256,u256,u256,u256,u256) {
    (self.kill_count,self.battle_count,self.capture_failed_count,self.capture_success_count,self.flee_count,self.release_count,self.move_count)
  }

  public fun get_kill_count(self: &Stats): u256 {
    self.kill_count
  }

  public fun get_battle_count(self: &Stats): u256 {
    self.battle_count
  }

  public fun get_capture_failed_count(self: &Stats): u256 {
    self.capture_failed_count
  }

  public fun get_capture_success_count(self: &Stats): u256 {
    self.capture_success_count
  }

  public fun get_flee_count(self: &Stats): u256 {
    self.flee_count
  }

  public fun get_release_count(self: &Stats): u256 {
    self.release_count
  }

  public fun get_move_count(self: &Stats): u256 {
    self.move_count
  }

  public(package) fun set_kill_count(self: &mut Stats, kill_count: u256) {
    self.kill_count = kill_count;
  }

  public(package) fun set_battle_count(self: &mut Stats, battle_count: u256) {
    self.battle_count = battle_count;
  }

  public(package) fun set_capture_failed_count(self: &mut Stats, capture_failed_count: u256) {
    self.capture_failed_count = capture_failed_count;
  }

  public(package) fun set_capture_success_count(self: &mut Stats, capture_success_count: u256) {
    self.capture_success_count = capture_success_count;
  }

  public(package) fun set_flee_count(self: &mut Stats, flee_count: u256) {
    self.flee_count = flee_count;
  }

  public(package) fun set_release_count(self: &mut Stats, release_count: u256) {
    self.release_count = release_count;
  }

  public(package) fun set_move_count(self: &mut Stats, move_count: u256) {
    self.move_count = move_count;
  }

  public(package) fun set(
    self: &mut Stats,
    kill_count: u256,
    battle_count: u256,
    capture_failed_count: u256,
    capture_success_count: u256,
    flee_count: u256,
    release_count: u256,
    move_count: u256,
  ) {
    self.kill_count = kill_count;
    self.battle_count = battle_count;
    self.capture_failed_count = capture_failed_count;
    self.capture_success_count = capture_success_count;
    self.flee_count = flee_count;
    self.release_count = release_count;
    self.move_count = move_count;
  }
}
