  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module numeron::numeron_errors {

  #[error]

  const CANNOT_MOVE: vector<u8> = b"This entity cannot move";

  public fun cannot_move_error(condition: bool) {
    assert!(condition, CANNOT_MOVE)
  }

  #[error]

  const ALREADY_REGISTERED: vector<u8> = b"This address is already registered";

  public fun already_registered_error(condition: bool) {
    assert!(condition, ALREADY_REGISTERED)
  }

  #[error]

  const NOT_REGISTERED: vector<u8> = b"This address is not registered";

  public fun not_registered_error(condition: bool) {
    assert!(condition, NOT_REGISTERED)
  }

  #[error]

  const SPACE_OBSTRUCTED: vector<u8> = b"This space is obstructed";

  public fun space_obstructed_error(condition: bool) {
    assert!(condition, SPACE_OBSTRUCTED)
  }

  #[error]

  const ALREADY_IN_ENCOUNTER: vector<u8> = b"This player already in an encounter";

  public fun already_in_encounter_error(condition: bool) {
    assert!(condition, ALREADY_IN_ENCOUNTER)
  }

  #[error]

  const NOT_IN_ENCOUNTER: vector<u8> = b"This player is not in an encounter";

  public fun not_in_encounter_error(condition: bool) {
    assert!(condition, NOT_IN_ENCOUNTER)
  }

  #[error]

  const INVALID_DIRECTION: vector<u8> = b"Invalid direction";

  public fun invalid_direction_error(condition: bool) {
    assert!(condition, INVALID_DIRECTION)
  }

  #[error]

  const INVALID_CHOICE: vector<u8> = b"Invalid choice";

  public fun invalid_choice_error(condition: bool) {
    assert!(condition, INVALID_CHOICE)
  }

  #[error]

  const BALANCE_TOO_LOW: vector<u8> = b"Balance too low";

  public fun balance_too_low_error(condition: bool) {
    assert!(condition, BALANCE_TOO_LOW)
  }

  #[error]

  const NOT_IN_CURRENT_MAP: vector<u8> = b"Player is not in the current map";

  public fun not_in_current_map_error(condition: bool) {
    assert!(condition, NOT_IN_CURRENT_MAP)
  }

  #[error]

  const NOT_YOUR_MONSTER: vector<u8> = b"This monster does not belong to you";

  public fun not_your_monster_error(condition: bool) {
    assert!(condition, NOT_YOUR_MONSTER)
  }

  #[error]

  const MONSTER_NOT_FOUND: vector<u8> = b"Monster not found";

  public fun monster_not_found_error(condition: bool) {
    assert!(condition, MONSTER_NOT_FOUND)
  }

  #[error]

  const ATLEAST_ONE_MONSTER: vector<u8> = b"At least one monster is required";

  public fun atleast_one_monster_error(condition: bool) {
    assert!(condition, ATLEAST_ONE_MONSTER)
  }

  #[error]

  const ITEM_NOT_FOUND: vector<u8> = b"Monster not found";

  public fun item_not_found_error(condition: bool) {
    assert!(condition, ITEM_NOT_FOUND)
  }

  #[error]

  const ALREADY_IN_BATTLE: vector<u8> = b"This monster is already in battle";

  public fun already_in_battle_error(condition: bool) {
    assert!(condition, ALREADY_IN_BATTLE)
  }

  #[error]

  const NOT_TELEPORT_POINT: vector<u8> = b"This is not a teleport point";

  public fun not_teleport_point_error(condition: bool) {
    assert!(condition, NOT_TELEPORT_POINT)
  }

  #[error]

  const INVALID_ITEM_PARAMETERS: vector<u8> = b"Invalid item parameters";

  public fun invalid_item_parameters_error(condition: bool) {
    assert!(condition, INVALID_ITEM_PARAMETERS)
  }

  #[error]

  const ORDER_NOT_FOUND: vector<u8> = b"Order not found";

  public fun order_not_found_error(condition: bool) {
    assert!(condition, ORDER_NOT_FOUND)
  }

  #[error]

  const ORDER_EXPIRED: vector<u8> = b"Order expired";

  public fun order_expired_error(condition: bool) {
    assert!(condition, ORDER_EXPIRED)
  }

  #[error]

  const NOT_YOUR_ORDER: vector<u8> = b"This order does not belong to you";

  public fun not_your_order_error(condition: bool) {
    assert!(condition, NOT_YOUR_ORDER)
  }

  #[error]

  const NOT_EXIST_LIVE_MONSTER: vector<u8> = b"This player does not have a live monster";

  public fun not_exist_live_monster_error(condition: bool) {
    assert!(condition, NOT_EXIST_LIVE_MONSTER)
  }

  #[error]

  const INVALID_KEY_AMOUNT: vector<u8> = b"Invalid key amount";

  public fun invalid_key_amount_error(condition: bool) {
    assert!(condition, INVALID_KEY_AMOUNT)
  }
}
